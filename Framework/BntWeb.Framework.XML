<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BntWeb.Framework</name>
    </assembly>
    <members>
        <member name="T:BntWeb.Caching.SimpleAcquireContext">
             <summary>
            
             </summary>
        </member>
        <member name="M:BntWeb.Caching.DefaultCacheHolder.GetCache``2(System.Type)">
            <summary>
            获取一个缓存上下文，如果不存在则创建一个新的空对象
            </summary>
            <typeparam name="TKey">Key对象的的类型</typeparam>
            <typeparam name="TResult">缓存对象的类型</typeparam>
            <param name="component">组件的上下文</param>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Caching.DefaultCacheManager">
            <summary>
            提供高速缓存管理器的默认实现
            缓存管理器提供了一个抽象的缓存架使它容易换隔离在一个组件上下文
            </summary>
        </member>
        <member name="M:BntWeb.Caching.DefaultCacheManager.#ctor(System.Type,BntWeb.Caching.ICacheHolder)">
            <summary>
            为给定的组件类型构造新的缓存管理器，并使用特定的缓存存储实现
            </summary>
            <param name="component">缓存应用的组件（上下文）</param>
            <param name="cacheHolder">包含缓存的实体的缓存存储</param>
        </member>
        <member name="M:BntWeb.Caching.DefaultCacheManager.GetCache``2">
            <summary>
            从缓存存储中获取一个实体对象
            </summary>
            <typeparam name="TKey">用来获取缓存的键的类型</typeparam>
            <typeparam name="TResult">缓存中的缓存实体的类型</typeparam>
            <returns>从缓存存储中获取的实体对象</returns>
        </member>
        <member name="M:BntWeb.Caching.DefaultCacheManager.Get``2(``0,System.Func{BntWeb.Caching.AcquireContext{``0},``1})">
            <summary>
            获取一个缓存如果不存在
            执行acquire并返回结果
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key"></param>
            <param name="acquire"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Caching.DefaultCacheManager.TryGet``2(``0)">
            <summary>
            尝试获取一个缓存
            不存在返回类型的默认值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Caching.ICache`2.Get(`0,System.Func{BntWeb.Caching.AcquireContext{`0},`1})">
            <summary>
            获取一个缓存如果不存在
            执行acquire并返回结果
            </summary>
            <param name="key"></param>
            <param name="acquire"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Caching.ICache`2.Replace(`0,System.Func{BntWeb.Caching.AcquireContext{`0},`1})">
            <summary>
            获取一个缓存如果不存在
            执行acquire并返回结果，
            如果存在则替换原有缓存
            执行acquire并返回结果
            </summary>
            <param name="key"></param>
            <param name="acquire"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Caching.ICache`2.TryGet(`0)">
            <summary>
            尝试获取一个缓存
            不存在返回Null
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Caching.ICacheManager.Get``2(``0,System.Func{BntWeb.Caching.AcquireContext{``0},``1})">
            <summary>
            获取一个缓存如果不存在
            执行acquire并返回结果
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key"></param>
            <param name="acquire"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Caching.ICacheManager.Replace``2(``0,System.Func{BntWeb.Caching.AcquireContext{``0},``1})">
            <summary>
            获取一个缓存如果不存在
            执行acquire并返回结果，
            如果存在则替换原有缓存
            执行acquire并返回结果
            </summary>
            <param name="key"></param>
            <param name="acquire"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Caching.ICacheManager.TryGet``2(``0)">
            <summary>
            尝试获取一个缓存
            不存在返回Null
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Caching.ICacheManager.GetCache``2">
            <summary>
            获取一个缓存容器
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.KeyGenerator.GetGuidKey">
            <summary>
            生成Guid主键
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.KeyGenerator.GetOrderNumber">
            <summary>
            唯一订单号生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.KeyGenerator.GenerateRandom(System.Int32,System.Int32)">
            <summary>
            生成纯数字随机数
            </summary>
            <param name="numSeeds"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.KeyGenerator.GenerateRandom(System.Int32)">
            <summary>
            生成字母+数字随机数
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetSingleById``1(System.Object)">
            <summary>
            查找单个
            </summary>
            <param name="id">主键</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetSingleByConditon``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            查找单个
            </summary>
            <param name="expression">查询条件</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetAll``1(System.String[])">
            <summary>
            获取所有实体集合
            </summary>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetAll``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String[])">
            <summary>
            获取所有实体集合(单个排序)
            </summary>
            <param name="expression">查询条件</param>
            <param name="isDesc">是否倒序</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetAll``1(BntWeb.Data.Services.OrderModelField[])">
            <summary>
            获取所有实体集合(多个排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetAll``1(BntWeb.Data.Services.OrderModelField[],System.String[])">
            <summary>
            获取所有实体集合(多个排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.CommonSort``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            单个排序通用方法
            </summary>
            <typeparam name="TKey">排序字段</typeparam>
            <typeparam name="T"></typeparam>
            <param name="data">要排序的数据</param>
            <param name="orderWhere">排序条件</param>
            <param name="isDesc">是否倒序</param>
            <returns>排序后的集合</returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.CommonSort``1(System.Linq.IQueryable{``0},BntWeb.Data.Services.OrderModelField[])">
            <summary>
            多个排序通用方法
            </summary>
            <param name="data">要排序的数据</param>
            <param name="orderModelFields">字典集合(排序条件,是否倒序)</param>
            <returns>排序后的集合</returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            根据条件查询实体集合
            </summary>
            <param name="expression">查询条件 lambel表达式</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetList``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1},System.String[])">
            <summary>
            根据特定字段使用WhereIn查询
            </summary>
            <param name="expression">查询字段</param>
            <param name="conditions">in里面的值</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetList``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String[])">
            <summary>
            根据条件查询实体集合(单个字段排序)
            </summary>
            <param name="expression">查询条件 lambel表达式</param>
            <param name="orderByExpression"></param>
            <param name="isDesc"></param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},BntWeb.Data.Services.OrderModelField[])">
            <summary>
            根据条件查询实体集合(多个字段排序)
            </summary>
            <param name="expression">查询条件 lambel表达式</param>
            <param name="orderModelFields"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},BntWeb.Data.Services.OrderModelField[],System.String[])">
            <summary>
            根据条件查询实体集合(多个字段排序)
            </summary>
            <param name="expression">查询条件 lambel表达式</param>
            <param name="orderModelFields"></param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Int32@,System.String[])">
            <summary>
            获取分页集合(无条件无排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetListPaged``2(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Int32@,System.String[])">
            <summary>
            获取分页集合(无条件单个排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Int32@,BntWeb.Data.Services.OrderModelField[])">
            <summary>
            获取分页集合(无条件多字段排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Int32@,BntWeb.Data.Services.OrderModelField[],System.String[])">
            <summary>
            获取分页集合(无条件多字段排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@,System.String[])">
            <summary>
            获取分页集合(有条件无排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetListPaged``2(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Int32@,System.String[])">
            <summary>
            获取分页集合(有条件单个排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@,BntWeb.Data.Services.OrderModelField[])">
            <summary>
            获取分页集合(有条件多字段排序)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.CurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@,BntWeb.Data.Services.OrderModelField[],System.String[])">
            <summary>
            获取分页集合(有条件多字段排序)
            </summary>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Data.Services.OrderModelField">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="M:BntWeb.Data.Services.QueryableExtension.WhereIn``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            扩展方法  支持 in 操作
            </summary>
            <typeparam name="TEntity">需要扩展的对象类型</typeparam>
            <typeparam name="TValue">in 的值类型</typeparam>
            <param name="source">需要扩展的对象</param>
            <param name="valueSelector">值选择器 例如c=>c.UserId</param>
            <param name="values">值集合</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.QueryableExtension.Includes``1(System.Linq.IQueryable{``0},System.String[])">
            <summary>
            关联查询子集
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="source"></param>
            <param name="includes"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.Create``1(``0)">
            <summary>
            新增一个对象
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.Update``1(``0)">
            <summary>
            更新一个对象
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.Delete``1(``0)">
            <summary>
            删除一个对象
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.DeleteByConditon``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件删除对象
            </summary>
            <param name="expression">查询条件</param>
            <returns>返回删除的数量</returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            根据条件计数
            </summary>
            <param name="expression">查询条件</param>
            <returns>返回数量</returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetSingleById``1(System.Object)">
            <summary>
            根据Id获取一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetSingleByConditon``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            根据条件查询单条信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">查询条件</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetAll``1(System.String[])">
            <summary>
            获取所有实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetAll``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String[])">
            <summary>
            获取所有实体集合，单字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="expression">查询条件</param>
            <param name="isDesc">是否倒序</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetAll``1(BntWeb.Data.Services.OrderModelField[])">
            <summary>
            获取所有实体集合，多字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="orderModelFields">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetAll``1(BntWeb.Data.Services.OrderModelField[],System.String[])">
            <summary>
            获取所有实体集合，多字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="orderModelFields">排序字段</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[])">
            <summary>
            根据条件查询实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">查询条件</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetList``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1},System.String[])">
            <summary>
            根据特定字段使用WhereIn查询
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="expression">查询字段</param>
            <param name="conditions">in里面的值</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetList``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String[])">
            <summary>
            根据条件查询实体集合，单字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="expression">查询条件</param>
            <param name="orderByExpression">排序条件</param>
            <param name="isDesc">是否倒序</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},BntWeb.Data.Services.OrderModelField[])">
            <summary>
            根据条件查询实体集合，多字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">查询条件</param>
            <param name="orderModelFields">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetList``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},BntWeb.Data.Services.OrderModelField[],System.String[])">
            <summary>
            根据条件查询实体集合，多字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">查询条件</param>
            <param name="orderModelFields">排序字段</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetListPaged``2(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Int32@,System.String[])">
            <summary>
            获取分页集合(无条件单个排序)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="pageIndex">当前页面</param>
            <param name="pageSize">每页条数</param>
            <param name="orderByExpression">排序条件</param>
            <param name="isDesc">是否倒序</param>
            <param name="totalCount">总条数</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Int32@,BntWeb.Data.Services.OrderModelField[])">
            <summary>
            获取分页集合(无条件多字段排序)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex">当前页面</param>
            <param name="pageSize">每页条数</param>
            <param name="totalCount">总条数</param>
            <param name="orderModelFields">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Int32@,BntWeb.Data.Services.OrderModelField[],System.String[])">
            <summary>
            获取分页集合(无条件多字段排序)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex">当前页面</param>
            <param name="pageSize">每页条数</param>
            <param name="totalCount">总条数</param>
            <param name="orderModelFields">排序字段</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@,System.String[])">
            <summary>
            获取分页集合(有条件无排序)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex">当前页面</param>
            <param name="pageSize">每页条数</param>
            <param name="expression">查询条件</param>
            <param name="totalCount">总条数</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetListPaged``2(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Int32@,System.String[])">
            <summary>
            获取分页集合(有条件单个排序)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="pageIndex">当前页面</param>
            <param name="pageSize">每页条数</param>
            <param name="expression">查询条件</param>
            <param name="orderByExpression">排序条件</param>
            <param name="isDesc">是否倒序</param>
            <param name="totalCount">总条数</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@,BntWeb.Data.Services.OrderModelField[])">
            <summary>
            获取分页集合(有条件多字段排序)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex">当前页面</param>
            <param name="pageSize">每页条数</param>
            <param name="expression">查询条件</param>
            <param name="totalCount">总条数</param>
            <param name="orderModelFields">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Data.Services.ICurrencyService.GetListPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32@,BntWeb.Data.Services.OrderModelField[],System.String[])">
            <summary>
            获取分页集合(有条件多字段排序)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex">当前页面</param>
            <param name="pageSize">每页条数</param>
            <param name="expression">查询条件</param>
            <param name="totalCount">总条数</param>
            <param name="orderModelFields">排序字段</param>
            <param name="includes">关联查询的子对象</param>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Environment.BntWebHostContainerRegistry">
            <summary>
            给所有继承了IShim接口的注入BntWebHostContainer对象
            </summary>
        </member>
        <member name="M:BntWeb.Environment.Configuration.ExtensionLocations.ModuleMatch(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return module from path that is constructed as Location/Module/relative/path/in/module
            Path prefixes is expected as list of Location/ (location+trailing "/")
            
            Extension locations can contain '/' so they are matched with deeper path first
            </summary>
            <param name="virtualPath"></param>
            <returns>the module - or null of not found</returns>
        </member>
        <member name="M:BntWeb.Environment.Configuration.ExtensionLocations.ExtensionsModuleMatch(System.String)">
            <summary>
            Return module from path that is constructed as ExtensionLocation/Module/relative/path/in/module
            
            Extension locations can contain '/' so they are matched with deeper path first
            </summary>
            <param name="virtualPath"></param>
            <returns>the module - or null of not found</returns>
        </member>
        <member name="M:BntWeb.Environment.Configuration.ExtensionLocations.PrefixMatch(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Return true if the virtual path starts with any of the prefixes
            </summary>
        </member>
        <member name="M:BntWeb.Environment.Configuration.ExtensionLocations.GetConfigPaths(BntWeb.Environment.Configuration.IAppConfigurationAccessor,System.String,System.String)">
            <summary>
            Get list of comma separated paths from web.config appSettings
            Also return the default path
            </summary>
        </member>
        <member name="T:BntWeb.Environment.Configuration.IAppConfigurationAccessor">
            <summary>
            Exposes application configuration (can be e.g. AppSettings from Web.config or CloudConfiguration on Azure).
            </summary>
        </member>
        <member name="M:BntWeb.Environment.Configuration.IAppConfigurationAccessor.GetConfiguration(System.String)">
            <summary>
            Gets an application configuration value with the given name (can be e.g. AppSettings from Web.config or CloudConfiguration on Azure).
            </summary>
            <param name="name">The name of the application configuration entry.</param>
            <returns>The string value of the application configuration entry.</returns>
        </member>
        <member name="T:BntWeb.Environment.HostComponentsConfigModule">
            <summary>
            Alter components instantiations by setting property values defined in a configuration file
            </summary>
        </member>
        <member name="P:BntWeb.Environment.HostConstObject.Container">
            <summary>
            全局Autofac容器，请在无法使用默认的注入的情况下使用
            </summary>
        </member>
        <member name="P:BntWeb.Environment.HostConstObject.HostUrl">
            <summary>
            网站根目录，来自于Web.Config文件
            </summary>
        </member>
        <member name="M:BntWeb.Environment.IBntWebHost.Initialize">
            <summary>
            Called once on startup to configure app domain, and load/apply existing shell configuration
            </summary>
        </member>
        <member name="M:BntWeb.Environment.IBntWebHost.ReloadExtensions">
            <summary>
            Called externally when there is explicit knowledge that the list of installed
            modules/extensions has changed, and they need to be reloaded.
            </summary>
        </member>
        <member name="M:BntWeb.Environment.IBntWebHost.BeginRequest">
            <summary>
            Called each time a request begins to offer a just-in-time reinitialization point
            </summary>
        </member>
        <member name="M:BntWeb.Environment.IBntWebHost.EndRequest">
            <summary>
            Called each time a request ends to deterministically commit and dispose outstanding activity
            </summary>
        </member>
        <member name="T:BntWeb.Environment.IHostEnvironment">
            <summary>
            主机运行环境接口
            </summary>
        </member>
        <member name="T:BntWeb.Environment.IShim">
            <summary>
            需要使用HostContainer单例的需要实现该接口
            </summary>
        </member>
        <member name="M:BntWeb.FileSystems.Extensions.FileExtensions.GetFileType(System.String)">
            <summary>
            获取文件类型
            </summary>
            <param name="fileNameOrExtension">文件名或者文件扩展后缀</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Extensions.FileExtensions.GetThumbnail(System.String,System.Int32,System.Int32,BntWeb.FileSystems.Media.ThumbnailType,BntWeb.FileSystems.Media.WaterMark)">
            <summary>    
            为图片生成缩略图      
            </summary>    
            <param name="imagePath">原图片的相对路径</param>    
            <param name="width">缩略图宽</param>    
            <param name="height">缩略图高</param>
            <param name="thumbnailType">缩略图格式</param>
            <param name="waterMarkConfig">水印配置</param>
            <returns></returns>    
        </member>
        <member name="T:BntWeb.FileSystems.Extensions.ZipFileClass">
            <summary>
            打包解压操作类
            </summary>
        </member>
        <member name="M:BntWeb.FileSystems.Extensions.ZipFileClass.Compress(System.String,System.String,System.Boolean)">
            <summary>  
            压缩文件夹  
            </summary>  
            <param name="dir">待压缩的文件夹</param>  
            <param name="targetFileName">压缩后文件路径（包括文件名）</param>  
            <param name="recursive">是否递归压缩</param>  
            <returns></returns>  
        </member>
        <member name="M:BntWeb.FileSystems.Extensions.ZipFileClass.ZipFileDictory(System.String[])">
            <summary>  
            压缩目录  
            </summary>  
            <param name="args">数组(数组[0]: 要压缩的目录; 数组[1]: 压缩的文件名)</param>  
        </member>
        <member name="M:BntWeb.FileSystems.Extensions.ZipFileClass._CompressFolder(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>  
            压缩某个子文件夹  
            </summary>  
            <param name="basePath"></param>  
            <param name="zips"></param>  
            <param name="zipfolername"></param>       
        </member>
        <member name="M:BntWeb.FileSystems.Extensions.ZipFileClass._AddFile(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>  
            压缩某个子文件  
            </summary>  
            <param name="fileName"></param>  
            <param name="zips"></param>  
            <param name="zipfolername"></param>  
        </member>
        <member name="M:BntWeb.FileSystems.Extensions.ZipFileClass._CreateZipFile(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>  
            压缩单独文件  
            </summary>  
            <param name="fileToZip"></param>  
            <param name="zips"></param>  
            <param name="zipfolername"></param>  
        </member>
        <member name="M:BntWeb.FileSystems.Extensions.ZipFileClass.UnZipDirectory(System.String,System.String,System.String)">
            <summary>  
            解压缩目录  
            </summary>  
            <param name="zipDirectoryPath">压缩目录路径</param>  
            <param name="unZipDirecotyPath">解压缩目录路径</param>
            <param name="password">解压密码</param>  
        </member>
        <member name="T:BntWeb.FileSystems.Media.Base64Image">
            <summary>
            Base64数据格式在图片数据对象
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.Base64Image.FileName">
            <summary>
            文件名，包含扩展名
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.Base64Image.Data">
            <summary>
            Base64字符串数据流
            </summary>
        </member>
        <member name="T:BntWeb.FileSystems.Media.IFileService">
            <summary>
            
            </summary>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IFileService.SaveFile(System.Web.HttpPostedFileBase,System.Boolean,BntWeb.FileSystems.Media.StorageFile@,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},BntWeb.FileSystems.Media.ThumbnailType,System.Boolean,System.Object)">
            <summary>
            添加文件
            </summary>
            <param name="file"></param>
            <param name="isPublic"></param>
            <param name="outStorageFile"></param>
            <param name="mediumThumbnailWidth"></param>
            <param name="mediumThumbnailHeight"></param>
            <param name="smallThumbnailWidth"></param>
            <param name="smallThumbnailHeight"></param>
            <param name="thumbnailType"></param>
            <param name="waterMark">是否添加水印</param>
            <param name="extensionConfig">扩展配置</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IFileService.SaveFile(System.String,System.String,System.Boolean,BntWeb.FileSystems.Media.StorageFile@,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},BntWeb.FileSystems.Media.ThumbnailType,System.Boolean,System.Object)">
            <summary>
            添加文件
            </summary>
            <param name="base64String"></param>
            <param name="fileName"></param>
            <param name="isPublic"></param>
            <param name="outStorageFile"></param>
            <param name="mediumThumbnailWidth"></param>
            <param name="mediumThumbnailHeight"></param>
            <param name="smallThumbnailWidth"></param>
            <param name="smallThumbnailHeight"></param>
            <param name="thumbnailType"></param>
            <param name="waterMark">是否添加水印</param>
            <param name="extensionConfig">扩展配置</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IFileService.SaveFile(System.IO.Stream,System.String,System.Boolean,BntWeb.FileSystems.Media.StorageFile@,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},BntWeb.FileSystems.Media.ThumbnailType,System.Boolean,System.Object)">
            <summary>
            添加文件
            </summary>
            <param name="fileStream"></param>
            <param name="fileName"></param>
            <param name="isPublic"></param>
            <param name="outStorageFile"></param>
            <param name="mediumThumbnailWidth"></param>
            <param name="mediumThumbnailHeight"></param>
            <param name="smallThumbnailWidth"></param>
            <param name="smallThumbnailHeight"></param>
            <param name="thumbnailType"></param>
            <param name="waterMark">是否添加水印</param>
            <param name="extensionConfig">扩展配置</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IFileService.DeleteFileById(System.Guid)">
            <summary>
            删除文件及其关联引用
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IFileService.DeleteFilesForTask(System.DateTime)">
            <summary>
            提供给定时任务的删除文件方法
            </summary>
            <param name="outTime"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.GetFiles(System.Guid,System.String,System.String)">
            <summary>
            获取关联的文件
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="sourceType">数据源类型，自定义的字符串，用于模块内部的类型区分，可空</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.GetFileRelations(System.Guid,System.String,System.String)">
            <summary>
            获取文件关联关系
            并包含文件对象StorageFile
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.AssociateFile(System.Guid,System.String,System.String,System.Guid,System.String,System.Int32)">
            <summary>
            关联已经有的文件
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="moduleName"></param>
            <param name="fileId"></param>
            <param name="sourceType">数据源类型，自定义的字符串，用于模块内部的类型区分，可空</param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.DisassociateFile(System.Guid,System.String,System.Guid,System.String)">
            <summary>
            解除已经有的文件关联
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="fileId"></param>
            <param name="sourceType">数据源类型，自定义的字符串，用于模块内部的类型区分，可空</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.DisassociateFile(System.Guid,System.String,System.String)">
            <summary>
            解除所有的文件关联
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="sourceType">数据源类型，自定义的字符串，用于模块内部的类型区分，可空</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.ReplaceFile(System.Guid,System.String,System.String,System.Guid,System.String)">
            <summary>
            解除所有的文件关联
            并关联已经有的文件
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="moduleName"></param>
            <param name="fileId"></param>
            <param name="sourceType">数据源类型，自定义的字符串，用于模块内部的类型区分，可空</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.ReplaceFile(System.Guid,System.String,System.String,System.Guid[],System.String)">
            <summary>
            解除所有的文件关联
            并关联已经有的文件
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="moduleName"></param>
            <param name="fileIds">Guid数组</param>
            <param name="sourceType">数据源类型，自定义的字符串，用于模块内部的类型区分，可空</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.ReplaceFile(System.Guid,System.String,System.String,System.String,System.String)">
            <summary>
            解除所有的文件关联
            并关联已经有的文件
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="moduleName"></param>
            <param name="fileIds">Guid链接字符串，多个用“,”隔开</param>
            <param name="sourceType">数据源类型，自定义的字符串，用于模块内部的类型区分，可空</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.SetFileSort(System.Guid,System.String,System.Guid,System.Int32,System.String)">
            <summary>
            设置关联文件的排序
            </summary>
            <param name="sourceId"></param>
            <param name="moduleKey"></param>
            <param name="fileId"></param>
            <param name="sort"></param>
            <param name="sourceType">数据源类型，自定义的字符串，用于模块内部的类型区分，可空</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.FileSystems.Media.IStorageFileService.DeleteBySourceType(System.String)">
            <summary>
            根据SourceType删除所有文件引用
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="P:BntWeb.FileSystems.Media.StorageFile.MediumThumbnail">
            <summary>
            中等尺寸缩略图，图片类型可用
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.StorageFile.SmallThumbnail">
            <summary>
            小尺寸缩略图，图片类型可用
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.StorageFile.IsPublic">
            <summary>
            是否公用，公用的可以被其他模块选择引用
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.StorageFile.ExtensionConfig">
            <summary>
            扩展信息JSON字符串
            取出后序列化为自定义对象
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.StorageFile.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:BntWeb.FileSystems.Media.StorageFile.Simplified">
            <summary>
            简化对象
            </summary>
            <returns></returns>
        </member>
        <member name="F:BntWeb.FileSystems.Media.ThumbnailType.WhiteEdge">
            <summary>
            留白边
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.ThumbnailType.TakeCenter">
            <summary>
            中间开始切割
            多余的去掉
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.SimplifiedStorageFile.MediumThumbnail">
            <summary>
            中等尺寸缩略图，图片类型可用
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.SimplifiedStorageFile.SmallThumbnail">
            <summary>
            小尺寸缩略图，图片类型可用
            </summary>
        </member>
        <member name="T:BntWeb.FileSystems.Media.WaterMark">
            <summary>
            图片水印
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.WaterMark.WaterMarkType">
            <summary>
            水印类型
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.WaterMark.Position">
            <summary>
            水印位置
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.WaterMark.Opacity">
            <summary>
            透明度
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.WaterMark.WaterMarkText">
            <summary>
            水印文字
            </summary>
        </member>
        <member name="P:BntWeb.FileSystems.Media.WaterMark.MarkImage">
            <summary>
            水印图片
            </summary>
        </member>
        <member name="T:BntWeb.FileSystems.Media.WaterMarkType">
            <summary>
            水印类型
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.WaterMarkType.None">
            <summary>
            无水印
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.WaterMarkType.Text">
            <summary>
            文字水印
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.WaterMarkType.Image">
            <summary>
            图片水印
            </summary>
        </member>
        <member name="T:BntWeb.FileSystems.Media.Position">
            <summary>
            水印位置
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.Position.Center">
            <summary>
            居中
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.Position.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.Position.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.Position.LeftDown">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:BntWeb.FileSystems.Media.Position.RightDown">
            <summary>
            居中
            </summary>
        </member>
        <member name="M:BntWeb.FileSystems.VirtualPath.DefaultVirtualPathProvider.IsMalformedVirtualPath(System.String)">
            <summary>
            We want to reject path that contains ".." going outside of the application root.
            ToAppRelative does that already, but we want to do the same while avoiding exceptions.
            
            Note: This method doesn't detect all cases of malformed paths, it merely checks
                  for *some* cases of malformed paths, so this is not a replacement for full virtual path
                  verification through VirtualPathUtilty methods.
                  In other words, !IsMalformed does *not* imply "IsWellformed".
            </summary>
        </member>
        <member name="F:BntWeb.Logging.BntWebFileAppender._suffixes">
            <summary>
            日志文件后缀
            </summary>
        </member>
        <member name="F:BntWeb.Logging.BntWebFileAppender.Retries">
            <summary>
            OpenFile 方法的最大尝试次数
            </summary>
        </member>
        <member name="F:BntWeb.Logging.BntWebFileAppender.MaxSuffixes">
            <summary>
            后缀记录的最大数量，到达这个数量就会回收内存
            </summary>
        </member>
        <member name="M:BntWeb.Logging.BntWebFileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            打开日志文件，如果失败就使用新文件替代
            </summary>
            <param name="fileName">在配置文件中指定的文件名</param>
            <param name="append">是否是追加写入</param>
        </member>
        <member name="M:BntWeb.Logging.BntWebFileAppender.BaseOpenFile(System.String,System.Boolean)">
            <summary>
            调用基类的使用方法
            </summary>
            <param name="fileName">在配置文件中指定的文件名</param>
            <param name="append">是否是追加写入</param>
        </member>
        <member name="M:BntWeb.Logging.LoggingExtensions.Operation(BntWeb.Logging.ILogger,System.String,BntWeb.Environment.IBntWebModule,BntWeb.Security.SecurityLevel,System.Object)">
            <summary>
            记录业务操作日志
            </summary>
            <param name="logger"></param>
            <param name="message">日志内容</param>
            <param name="module">当前模块</param>
            <param name="level">安全等级</param>
            <param name="extension">扩展的自定义数据</param>
        </member>
        <member name="M:BntWeb.Mvc.BntWebControllerFactory.TryResolve``1(System.Object,``0@)">
            <summary>
            Tries to resolve an instance for the controller associated with a given service key for the work context scope.
            </summary>
            <typeparam name="T">The type of the controller.</typeparam>
            <param name="serviceKey">The service key for the controller.</param>
            <param name="instance">The controller instance.</param>
            <returns>True if the controller was resolved; false otherwise.</returns>
        </member>
        <member name="M:BntWeb.Mvc.BntWebControllerFactory.GetControllerType(System.Web.Routing.RequestContext,System.String)">
            <summary>
            Returns the controller type based on the name of both the controller and area.
            </summary>
            <param name="requestContext">The request context from where to fetch the route data containing the area.</param>
            <param name="controllerName">The controller name.</param>
            <returns>The controller type.</returns>
            <example>ControllerName: Item, Area: Containers would return the type for the ItemController class.</example>
        </member>
        <member name="M:BntWeb.Mvc.BntWebControllerFactory.GetControllerInstance(System.Web.Routing.RequestContext,System.Type)">
            <summary>
            Returns an instance of the controller.
            </summary>
            <param name="requestContext">The request context from where to fetch the route data containing the area.</param>
            <param name="controllerType">The controller type.</param>
            <returns>An instance of the controller if it's type is registered; null if otherwise.</returns>
        </member>
        <member name="P:BntWeb.Mvc.DataJsonResult.Success">
            <summary>
            执行是否成功
            </summary>
        </member>
        <member name="P:BntWeb.Mvc.DataJsonResult.ErrorMessage">
            <summary>
            错误消息
            给该值赋非空值，Success会被设置为false
            </summary>
        </member>
        <member name="P:BntWeb.Mvc.DataJsonResult.Data">
            <summary>
            返回的数据
            </summary>
        </member>
        <member name="T:BntWeb.Mvc.MvcModule.HttpContextPlaceholder">
            <summary>
            Standin context for background tasks.
            </summary>
        </member>
        <member name="T:BntWeb.Mvc.MvcModule.HttpRequestPlaceholder">
            <summary>
            standin context for background tasks. 
            </summary>
        </member>
        <member name="P:BntWeb.Mvc.MvcModule.HttpRequestPlaceholder.IsAuthenticated">
            <summary>
            anonymous identity provided for background task.
            </summary>
        </member>
        <member name="P:BntWeb.Mvc.MvcModule.HttpRequestPlaceholder.AnonymousID">
            <summary>
            Create an anonymous ID the same way as ASP.NET would.
            Some users of an HttpRequestPlaceHolder object could expect this,
            say CookieCultureSelector from module Orchard.CulturePicker.
            </summary>
        </member>
        <member name="M:BntWeb.Mvc.Routes.IRouteProvider.GetRoutes">
            <summary>
            obsolete, prefer other format for extension methods
            </summary>
        </member>
        <member name="M:BntWeb.Mvc.ViewEngines.AwareViewEngineShim.SetLocationFormats">
            <summary>
            设置视图的搜索路径集合
            </summary>
        </member>
        <member name="T:BntWeb.IDependency">
            <summary>
            
            </summary>
        </member>
        <member name="T:BntWeb.ISingletonDependency">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:BntWeb.Security.MemberAuthorizeAttribute.Forcible">
            <summary>
            是否强制认证，true认证失败则报错，false认证失败继续执行并没有登陆用户信息
            </summary>
        </member>
        <member name="M:BntWeb.Security.RequestLimitFilter.GetClientIP(System.Web.Mvc.ResultExecutingContext)">
            <summary>  
            获取客户端Ip  
            </summary>  
            <returns></returns>  
        </member>
        <member name="F:BntWeb.Security.SecurityLevel.Normal">
            <summary>
            普通
            </summary>
        </member>
        <member name="F:BntWeb.Security.SecurityLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:BntWeb.Security.SecurityLevel.Danger">
            <summary>
            危险
            </summary>
        </member>
        <member name="T:BntWeb.Services.EmailWorker">
            <summary>
            邮件发送处理类
            </summary>
        </member>
        <member name="F:BntWeb.Services.EmailWorker.mMailMessage">
            <summary>
            主要处理发送邮件的内容（如：收发人地址、标题、主体、图片等等）
            </summary>
        </member>
        <member name="F:BntWeb.Services.EmailWorker.mSmtpClient">
            <summary>
            主要处理用smtp方式发送此邮件的配置信息（如：邮件服务器、发送端口号、验证方式等等）
            </summary>
        </member>
        <member name="F:BntWeb.Services.EmailWorker.mSenderPort">
            <summary>
            发送邮件所用的端口号（htmp协议默认为25）
            </summary>
        </member>
        <member name="F:BntWeb.Services.EmailWorker.mSenderServerHost">
            <summary>
            发件箱的邮件服务器地址（IP形式或字符串形式均可）
            </summary>
        </member>
        <member name="F:BntWeb.Services.EmailWorker.mSenderPassword">
            <summary>
            发件箱的密码
            </summary>
        </member>
        <member name="F:BntWeb.Services.EmailWorker.mSenderUsername">
            <summary>
            发件箱的用户名（即@符号前面的字符串，例如：hello@163.com，用户名为：hello）
            </summary>
        </member>
        <member name="F:BntWeb.Services.EmailWorker.mEnableSsl">
            <summary>
            是否对邮件内容进行socket层加密传输
            </summary>
        </member>
        <member name="F:BntWeb.Services.EmailWorker.mEnablePwdAuthentication">
            <summary>
            是否对发件人邮箱进行密码验证
            </summary>
        </member>
        <member name="M:BntWeb.Services.EmailWorker.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             构造函数
            </summary>
            <param name="server">发件箱的邮件服务器地址</param>
            <param name="toMail">收件人地址（可以是多个收件人，程序中是以“;"进行区分的）</param>
            <param name="fromMail">发件人地址</param>
            <param name="subject">邮件标题</param>
            <param name="emailBody">邮件内容（可以以html格式进行设计）</param>
            <param name="username">发件箱的用户名（即@符号前面的字符串，例如：hello@163.com，用户名为：hello）</param>
            <param name="password">发件人邮箱密码</param>
            <param name="port">发送邮件所用的端口号（htmp协议默认为25）</param>
            <param name="sslEnable">true表示对邮件内容进行socket层加密传输，false表示不加密</param>
            <param name="pwdCheckEnable">true表示对发件人邮箱进行密码验证，false表示不对发件人邮箱进行密码验证</param>
        </member>
        <member name="M:BntWeb.Services.EmailWorker.AddAttachments(System.String)">
            <summary>
             添加附件
            </summary>
            <param name="attachmentsPath">附件的路径集合，以分号分隔</param>
        </member>
        <member name="M:BntWeb.Services.EmailWorker.Send">
            <summary>
             邮件的发送
            </summary>
        </member>
        <member name="T:BntWeb.Services.IClock">
            <summary>
            Provides the current Utc <see cref="T:System.DateTime"/>, and time related method for cache management.
            This service should be used whenever the current date and time are needed, instead of <seealso cref="T:System.DateTime"/> directly.
            It also makes implementations more testable, as time can be mocked.
            </summary>
        </member>
        <member name="P:BntWeb.Services.IClock.UtcNow">
            <summary>
            Gets the current <see cref="T:System.DateTime"/> of the system, expressed in Utc
            </summary>
        </member>
        <member name="M:BntWeb.Services.IClock.When(System.TimeSpan)">
            <summary>
            Provides a <see cref="T:BntWeb.Caching.IVolatileToken"/> instance which can be used to cache some information for a 
            specific duration.
            </summary>
            <param name="duration">The duration that the token must be valid.</param>
            <example>
            This sample shows how to use the <see cref="M:BntWeb.Services.IClock.When(System.TimeSpan)"/> method by returning the result of
            a method named LoadVotes(), which is computed every 10 minutes only.
            <code>
            _cacheManager.Get("votes",
                ctx => {
                    ctx.Monitor(_clock.When(TimeSpan.FromMinutes(10)));
                    return LoadVotes();
            });
            </code>
            </example>
        </member>
        <member name="M:BntWeb.Services.IClock.WhenUtc(System.DateTime)">
            <summary>
            Provides a <see cref="T:BntWeb.Caching.IVolatileToken"/> instance which can be used to cache some 
            until a specific date and time.
            </summary>
            <param name="absoluteUtc">The date and time that the token must be valid until.</param>
            <example>
            This sample shows how to use the <see cref="M:BntWeb.Services.IClock.WhenUtc(System.DateTime)"/> method by returning the result of
            a method named LoadVotes(), which is computed once, and no more until the end of the year.
            <code>
            var endOfYear = _clock.UtcNow;
            endOfYear.Month = 12;
            endOfYear.Day = 31;
            
            _cacheManager.Get("votes",
                ctx => {
                    ctx.Monitor(_clock.WhenUtc(endOfYear));
                    return LoadVotes();
            });
            </code>
            </example>
        </member>
        <member name="T:BntWeb.Services.IConfigService">
            <summary>
            配置服务接口
            用于处理系统和模块的独立配置数据
            </summary>
        </member>
        <member name="M:BntWeb.Services.IConfigService.Get``1">
            <summary>
            获取一个配置
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IConfigService.Save(System.Object)">
            <summary>
            保存配置
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IEmailService.Send(System.String,System.String,System.String,System.String[])">
            <summary>
            发送邮件
            </summary>
            <param name="email">接收邮件地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="attachments">附件地址</param>
        </member>
        <member name="T:BntWeb.Services.IHttpClient">
            <summary>
            Http请求客户端服务
            </summary>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Post(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Post``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Put(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Put``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Patch(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Patch``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Delete(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IHttpClient.Delete``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Services.IPushService">
            <summary>
            消息推送服务
            </summary>
        </member>
        <member name="M:BntWeb.Services.IPushService.Push(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            给所有人推送消息
            </summary>
            <param name="message"></param>
            <param name="paras">附加参数</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IPushService.Push(System.String,BntWeb.Security.Identity.User,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            给一个用户推送消息
            </summary>
            <param name="message"></param>
            <param name="user"></param>
            <param name="paras">附加参数</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IPushService.Push(System.String,System.Collections.Generic.List{BntWeb.Security.Identity.User},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            给所有用户推送消息
            </summary>
            <param name="message"></param>
            <param name="users"></param>
            <param name="paras">附加参数</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IPushService.Push(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            给一个用户推送消息
            </summary>
            <param name="message"></param>
            <param name="userId"></param>
            <param name="paras">附加参数</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.IPushService.Push(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            给所有用户推送消息
            </summary>
            <param name="message"></param>
            <param name="userIds"></param>
            <param name="paras">附加参数</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.ISecurityService.Encrypt(System.String)">
            <summary>
            基于配置的Key对数据进行ASE256加密
            </summary>
            <param name="value">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.ISecurityService.Encrypt(System.Object)">
            <summary>
            基于配置的Key对数据进行ASE256加密
            </summary>
            <param name="value">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.ISecurityService.Decrypt(System.String)">
            <summary>
            基于配置的Key对数据进行ASE256解密
            </summary>
            <param name="value">要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.ISmsService.SendCode(System.String,BntWeb.Environment.IBntWebModule,System.String)">
            <summary>
            给手机号发送验证码
            </summary>
            <param name="phone"></param>
            <param name="module"></param>
            <param name="type">短信所属的业务类型</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.ISmsService.VerifyCode(System.String,System.String,BntWeb.Environment.IBntWebModule,System.String,System.Boolean)">
            <summary>
            验证手机验证码
            </summary>
            <param name="phone"></param>
            <param name="code"></param>
            <param name="module"></param>
            <param name="type">短信所属的业务类型</param>
            <param name="invalid">验证成功则失效</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.ISmsService.Invalid(System.String,BntWeb.Environment.IBntWebModule,System.String)">
            <summary>
            强制失效
            </summary>
            <param name="phone"></param>
            <param name="module"></param>
            <param name="type">短信所属的业务类型</param>
        </member>
        <member name="M:BntWeb.Services.ISmsService.VerifyCodeWithKey(System.String,System.String,System.Boolean)">
            <summary>
            验证手机验证码
            </summary>
            <param name="key">发送短信验证码时返回的key</param>
            <param name="code"></param>
            <param name="invalid">验证成功则失效</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.ISmsService.Invalid(System.String)">
            <summary>
            强制失效
            </summary>
            <param name="key">发送短信验证码时返回的key</param>
        </member>
        <member name="M:BntWeb.Services.ISmsService.Send(BntWeb.Services.SmsContent)">
            <summary>
            给手机号发短信
            </summary>
            <param name="smsContent"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.ISmsService.QueryResidualQuantity">
            <summary>
            查询剩余数量
            </summary>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Services.SmsContent">
            <summary>
            短信发送结果
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.Phone">
            <summary>
            发送到的手机号
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.Message">
            <summary>
            短信内容
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.SendToUser">
            <summary>
            发送到的用户对象，可能为空
            </summary>
        </member>
        <member name="F:BntWeb.Services.SmsContent.KeyValues">
            <summary>
            短信内容中带的关键数值
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.SendStatus">
            <summary>
            发送状态
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.Module">
            <summary>
            提交发送的来源模块
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.SendTime">
            <summary>
            短信发送时间
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.InnerType">
            <summary>
            所属内部业务类型，自定义，用于区别于其他业务
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:BntWeb.Services.SmsContent.Key">
            <summary>
            缓存Key值
            </summary>
        </member>
        <member name="T:BntWeb.Services.SmsSendStatus">
            <summary>
            短信发送类型
            </summary>
        </member>
        <member name="T:BntWeb.Services.SecurityService">
            <summary>
            
            </summary>
        </member>
        <member name="M:BntWeb.Services.SecurityService.#ctor(BntWeb.Environment.Configuration.IAppConfigurationAccessor)">
            <summary>
            
            </summary>
            <param name="appConfigurationAccessor"></param>
        </member>
        <member name="P:BntWeb.Services.SecurityService.ConfigKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:BntWeb.Services.SecurityService.Encrypt(System.String)">
            <summary>
            WebApi数据加密
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.SecurityService.Encrypt(System.Object)">
            <summary>
            WebApi数据加密
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.SecurityService.Decrypt(System.String)">
            <summary>
            WebApi数据解密
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Services.HttpClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:BntWeb.Services.HttpClient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:BntWeb.Services.HttpClient.Logger">
            <summary>
            
            </summary>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Post(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Post``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Put(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Put``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Patch(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Patch``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Delete(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Services.HttpClient.Delete``1(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:BntWeb.UI.Navigation.MenuFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:BntWeb.UI.Navigation.MenuFilter.#ctor(BntWeb.UI.Navigation.INavigationManager,BntWeb.Caching.ICacheManager)">
            <summary>
            
            </summary>
            <param name="navigationManager"></param>
            <param name="cacheManager"></param>
        </member>
        <member name="M:BntWeb.UI.Navigation.MenuFilter.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:BntWeb.UI.Navigation.MenuFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:BntWeb.UI.Navigation.MenuConfigItem">
            <summary>
            菜单配置项
            </summary>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.PopulateMenu(System.Object,System.Object,System.Object,System.Collections.Generic.IEnumerable{BntWeb.UI.Navigation.MenuItem})">
            <summary>
            Populates the menu shapes.
            </summary>
            <param name="shapeFactory">The shape factory.</param>
            <param name="parentShape">The menu parent shape.</param>
            <param name="menu">The menu shape.</param>
            <param name="menuItems">The current level to populate.</param>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.PopulateLocalMenu(System.Object,System.Object,System.Object,System.Collections.Generic.Stack{BntWeb.UI.Navigation.MenuItem})">
            <summary>
            Populates the local menu starting from the first non local task parent.
            </summary>
            <param name="shapeFactory">The shape factory.</param>
            <param name="parentShape">The menu parent shape.</param>
            <param name="menu">The menu shape.</param>
            <param name="selectedPath">The selection path.</param>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.PopulateLocalMenu(System.Object,System.Object,System.Object,System.Collections.Generic.IEnumerable{BntWeb.UI.Navigation.MenuItem})">
            <summary>
            Populates the local menu shapes.
            </summary>
            <param name="shapeFactory">The shape factory.</param>
            <param name="parentShape">The menu parent shape.</param>
            <param name="menu">The menu shape.</param>
            <param name="menuItems">The current level to populate.</param>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.SetSelectedPath(System.Collections.Generic.IEnumerable{BntWeb.UI.Navigation.MenuItem},System.Web.HttpRequestBase,System.Web.Routing.RouteData)">
            <summary>
            Identifies the currently selected path, starting from the selected node.
            </summary>
            <param name="menuItems">All the menuitems in the navigation menu.</param>
            <param name="currentRequest">The currently executed request if any</param>
            <param name="currentRouteData">The current route data.</param>
            <returns>A stack with the selection path being the last node the currently selected one.</returns>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.SetSelectedPath(System.Collections.Generic.IEnumerable{BntWeb.UI.Navigation.MenuItem},System.Web.HttpRequestBase,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Identifies the currently selected path, starting from the selected node.
            </summary>
            <param name="menuItems">All the menuitems in the navigation menu.</param>
            <param name="currentRequest">The currently executed request if any</param>
            <param name="currentRouteData">The current route data.</param>
            <returns>A stack with the selection path being the last node the currently selected one.</returns>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.SetSelectedPath(System.Collections.Generic.IEnumerable{BntWeb.UI.Navigation.MenuItem},System.Web.HttpRequestBase,System.Web.Routing.RouteValueDictionary,System.Boolean)">
            <summary>
            Identifies the currently selected path, starting from the selected node.
            </summary>
            <param name="menuItems">All the menuitems in the navigation menu.</param>
            <param name="currentRequest">The currently executed request if any</param>
            <param name="currentRouteData">The current route data.</param>
            <param name="compareUrls">Should compare raw string URLs instead of route data.</param>
            <returns>A stack with the selection path being the last node the currently selected one.</returns>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.FindParentLocalTask(System.Collections.Generic.Stack{BntWeb.UI.Navigation.MenuItem})">
            <summary>
            Find the first level in the selection path, starting from the bottom, that is not a local task.
            </summary>
            <param name="selectedPath">The selection path stack. The bottom node is the currently selected one.</param>
            <returns>The first node, starting from the bottom, that is not a local task. Otherwise, null.</returns>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.RouteMatches(System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)">
            <summary>
            Determines if a menu item corresponds to a given route.
            </summary>
            <param name="itemValues">The menu item.</param>
            <param name="requestValues">The route data.</param>
            <returns>True if the menu item's action corresponds to the route data; false otherwise.</returns>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.BuildMenuItemShape(System.Object,System.Object,System.Object,BntWeb.UI.Navigation.MenuItem)">
            <summary>
            Builds a menu item shape.
            </summary>
            <param name="shapeFactory">The shape factory.</param>
            <param name="parentShape">The parent shape.</param>
            <param name="menu">The menu shape.</param>
            <param name="menuItem">The menu item to build the shape for.</param>
            <returns>The menu item shape.</returns>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationHelper.BuildLocalMenuItemShape(System.Object,System.Object,System.Object,BntWeb.UI.Navigation.MenuItem)">
            <summary>
            Builds a local menu item shape.
            </summary>
            <param name="shapeFactory">The shape factory.</param>
            <param name="parentShape">The parent shape.</param>
            <param name="menu">The menu shape.</param>
            <param name="menuItem">The menu item to build the shape for.</param>
            <returns>The menu item shape.</returns>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationManager.Reduce(System.Collections.Generic.IEnumerable{BntWeb.UI.Navigation.MenuItem},System.Boolean,System.Boolean)">
            <summary>
            Updates the items by checking for permissions
            </summary>
        </member>
        <member name="M:BntWeb.UI.Navigation.NavigationManager.Arrange(System.Collections.Generic.IEnumerable{BntWeb.UI.Navigation.MenuItem})">
            <summary>
            Organizes a list of <see cref="T:BntWeb.UI.Navigation.MenuItem"/> into a hierarchy based on their positions
            </summary>
        </member>
        <member name="M:BntWeb.Utility.Encryption.Md5(System.String,System.Int32)">
            <summary>
            md5加密
            </summary>
            <param name="str">待加密字符串</param>
            <param name="digit">加密强度，=16是16位加密 其他是32位加密</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Encryption.Encrypt(System.String,System.String)">
            <summary>
            Ase256加密，并转成Base64输出
            </summary>
            <param name="toEncrypt"></param>
            <param name="key">内部会对此Key进行MD5的32位加密</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Encryption.Decrypt(System.String,System.String)">
            <summary>
            Ase256解密
            </summary>
            <param name="toDecrypt">Base64后的Ase256加密字符串</param>
            <param name="key">内部会对此Key进行MD5的32位加密</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.DeepCopy``1(``0)">
            <summary>
            引用类型对象深拷贝
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            在集合中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stringValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.In``1(``0,``0[])">
            <summary>
            在数组中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stringValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            不在数组中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stringValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.NotIn``1(``0,``0[])">
            <summary>
            不在数组中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stringValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            转成DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.ToFormat(System.String,System.Object[])">
            <summary>
            格式显示字符串
            </summary>
            <param name="stringFormat"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            是否在区间内
            </summary>
            <param name="intValue"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.IsInRange(System.Double,System.Double,System.Double)">
            <summary>
            是否在区间内
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.IsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            是否在区间内
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.GetcDateDiff(System.DateTime,System.DateTime)">
            <summary>
             计算出请求有效时间 (秒)单位
             </summary>
             <param name="dateBegin">开始时间</param>
             <param name="dateEnd">结束时间</param>
             <returns>返回(秒)单位，比如: 0.00239秒</returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.GetElapsedTime(System.DateTime)">
            <summary>
            格式化距今时间
            </summary>
            <param name="dateTime">时间</param>
            <returns>string</returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.DayZero(System.DateTime)">
            <summary>
            获取一天零点时间， 00:00:00
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.DayEnd(System.DateTime)">
            <summary>
            获取一天最后时间， 00:00:00
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.IsNotInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            是否在区间内
            </summary>
            <param name="intValue"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.GetAsZeroIfNull(System.Nullable{System.Int32})">
            <summary>
            如果为null返回0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.GetAsZeroIfNull(System.Nullable{System.Double})">
            <summary>
            如果为null返回0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            取字典中的值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            取字典中的值，未取到返回默认值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            循环执行方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="eachAction"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.Each(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            循环执行方法
            </summary>
            <param name="values"></param>
            <param name="eachAction"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.IsNullable(System.Type)">
            <summary>
            是否为null
            </summary>
            <param name="theType"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.IsNullableOfT(System.Type)">
            <summary>
            是否为该类型的null值
            </summary>
            <param name="theType"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.IsNullableOf(System.Type,System.Type)">
            <summary>
            是否为该类型的null值或者其他值
            </summary>
            <param name="theType"></param>
            <param name="otherType"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.AddMany``1(System.Collections.Generic.IList{``0},``0[])">
            <summary>
            添加到集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加到集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.OnesDigit(System.Int32)">
            <summary>
            取个位数
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.TensDigit(System.Int32)">
            <summary>
            取十位数
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.HundredsDigit(System.Int32)">
            <summary>
            取百位数
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.ToJson(System.Object)">
            <summary>
            对象转Json
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.Description(System.Enum)">
            <summary>
            获取描述信息
            </summary>
            <param name="en">枚举</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.BasicExtensions.GetItems(System.Type)">
            <summary>
            遍历读取枚举项数据
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Utility.Extensions.EnumItem">
            <summary>
            枚举值对象
            </summary>
        </member>
        <member name="P:BntWeb.Utility.Extensions.EnumItem.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:BntWeb.Utility.Extensions.EnumItem.Name">
            <summary>
            枚举名
            </summary>
        </member>
        <member name="P:BntWeb.Utility.Extensions.EnumItem.Value">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="M:BntWeb.Utility.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加到集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.CollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            从集合中删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            是否为空
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.DoubleExtensions.Round(System.Double,System.Int32)">
            <summary>
            将双精度浮点值按指定的小数位数舍入
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.DoubleExtensions.Minutes(System.Double)">
            <summary>
            返回表示指定分钟数的 System.TimeSpan，其中对秒数的指定精确到最接近的毫秒
            </summary>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.DoubleExtensions.Hours(System.Double)">
            <summary>
            返回表示指定小时数的 System.TimeSpan其中对小时数的指定精确到最接近的毫秒。
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.DoubleExtensions.Seconds(System.Double)">
            <summary>
            返回表示指定秒数的 System.TimeSpan，其中对秒数的指定精确到最接近的毫秒
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.DoubleExtensions.Milliseconds(System.Double)">
            <summary>
            返回表示指定毫秒数的 System.TimeSpan
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.DoubleExtensions.Days(System.Double)">
            <summary>
            返回表示指定天数的 System.TimeSpan，其中对天数的指定精确到最接近的毫秒
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.DoubleExtensions.ToRadians(System.Double)">
            <summary>
            角度转弧度
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.DoubleExtensions.ToDegrees(System.Double)">
            <summary>
            弧度转角度
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Utility.Extensions.LongExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.Kb(System.Int64)">
            <summary>
            字节长度转Kb
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.Mb(System.Int64)">
            <summary>
            字节长度转Mb
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.Gb(System.Int64)">
            <summary>
            字节长度转Gb
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.Minutes(System.Int64)">
            <summary>
            返回表示指定分钟数的 System.TimeSpan，其中对秒数的指定精确到最接近的毫秒
            </summary>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.Seconds(System.Int64)">
            <summary>
            返回表示指定秒数的 System.TimeSpan，其中对秒数的指定精确到最接近的毫秒
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.Milliseconds(System.Int64)">
            <summary>
            返回表示指定毫秒数的 System.TimeSpan
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.Days(System.Int64)">
            <summary>
            返回表示指定天数的 System.TimeSpan，其中对天数的指定精确到最接近的毫秒
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.Hours(System.Int64)">
            <summary>
            返回表示指定小时数的 System.TimeSpan其中对小时数的指定精确到最接近的毫秒。
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.GetTimeStamp">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.LongExtensions.GetStampDateTime(System.Int64)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp">Unix时间戳格式</param>
            <returns>C#格式时间</returns>
        </member>
        <member name="T:BntWeb.Utility.Extensions.IntegerExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IntegerExtensions.Kb(System.Int32)">
            <summary>
            字节转Kb
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IntegerExtensions.Mb(System.Int32)">
            <summary>
            字节转Mb
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IntegerExtensions.Gb(System.Int32)">
            <summary>
            字节转Gb
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IntegerExtensions.Minutes(System.Int32)">
            <summary>
            返回表示指定分钟数的 System.TimeSpan，其中对秒数的指定精确到最接近的毫秒
            </summary>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IntegerExtensions.Seconds(System.Int32)">
            <summary>
            返回表示指定秒数的 System.TimeSpan，其中对秒数的指定精确到最接近的毫秒
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IntegerExtensions.Milliseconds(System.Int32)">
            <summary>
            返回表示指定毫秒数的 System.TimeSpan
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IntegerExtensions.Days(System.Int32)">
            <summary>
            返回表示指定天数的 System.TimeSpan，其中对天数的指定精确到最接近的毫秒
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IntegerExtensions.Hours(System.Int32)">
            <summary>
            返回表示指定小时数的 System.TimeSpan其中对小时数的指定精确到最接近的毫秒。
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IPExtensions.IsCorrectIP(System.String)">
            <summary>
            验证IP
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IPExtensions.IsLocalhostIP(System.String)">
            <summary>
            判断IP地址是否为本机地址
            </summary>
            <param name="ipAddress">IP地址字符串</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IPExtensions.IsInnerIP(System.String)">
            <summary>
            判断IP地址是否为内网IP地址
            </summary>
            <param name="ipAddress">IP地址字符串</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IPExtensions.GetIpNum(System.String)">
            <summary>
            把IP地址转换为Long型数字
            </summary>
            <param name="ipAddress">IP地址字符串</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.IPExtensions.IsInner(System.Int64,System.Int64,System.Int64)">
            <summary>
            判断用户IP地址转换为Long型后是否在内网IP地址所在范围
            </summary>
            <param name="userIp"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringBuilderExtensions.AppendIndentedFormat(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            格式化添加字符
            </summary>
            <param name="stringBuilder"></param>
            <param name="tabulations">tab次数</param>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringBuilderExtensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            格式化添加字符并换行
            </summary>
            <param name="stringBuilder"></param>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringBuilderExtensions.AppendIndentedLineFormat(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            格式化添加字符并换行
            </summary>
            <param name="stringBuilder"></param>
            <param name="tabulations">tab次数</param>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.To``1(System.String,``0)">
            <summary>
            类型转换,Guid类型请使用专用方法 ToGuid
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <param name="defaultValue">转换失败后的默认值</param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.ToGuid(System.String,System.Guid)">
            <summary>
            转换字符串为Guid
            </summary>
            <param name="val"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>
            为空或null或空字符
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.IsNotEmpty(System.String)">
            <summary>
            不为空或null或空字符
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            截取左边N个字符
            </summary>
            <param name="stringValue"></param>
            <param name="numCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            截取右边N个字符
            </summary>
            <param name="stringValue"></param>
            <param name="numCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.FromCsv(System.String)">
            <summary>
            从CSV文件格式读取数据
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.ToDelimited``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            用字符连接所有字符数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="selections"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.ToCsv``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转成CSV文件数据格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="selections"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.AlphaOnly(System.String)">
            <summary>
            只保留字母
            </summary>
            <param name="stringToClean"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.NumericOnly(System.String)">
            <summary>
            只保留数字
            </summary>
            <param name="stringToClean"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.AlphaNumericOnly(System.String)">
            <summary>
            只保留字母和数字
            </summary>
            <param name="stringToClean"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.ToUrlFriendly(System.String)">
            <summary>
            转为友好的URL格式
            </summary>
            <param name="stringToClean"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.ToSafeJson(System.String)">
            <summary>
            转义JSON文件格式，{、}转为{{、}}
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.ToUnixPlatform(System.String)">
            <summary>
            更改换行符号，\r\n -> \n
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.SanitizeHtml(System.String)">
            <summary>
            剔除HTML标签
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.SanitizeEmoji(System.String)">
            <summary>
            剔除emoji表情
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.GetLength(System.String)">
            <summary>
            检测含有中文字符串的实际长度
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            重复
            </summary>
            <param name="input"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            逆序
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.DeserializeJsonToObject``1(System.String)">
            <summary>
            解析JSON字符串生成对象实体
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">json字符串(eg.{"ID":"112","Name":"石子儿"})</param>
            <returns>对象实体</returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.DeserializeJsonToList``1(System.String)">
            <summary>
            解析JSON数组生成对象实体集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">json数组字符串(eg.[{"ID":"112","Name":"石子儿"}])</param>
            <returns>对象实体集合</returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            反序列化JSON到给定的匿名对象.
            </summary>
            <typeparam name="T">匿名对象类型</typeparam>
            <param name="json">json字符串</param>
            <param name="anonymousTypeObject">匿名对象</param>
            <returns>匿名对象</returns>
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.IsIDCard(System.String)">
            <summary>  
            验证是否是合理的身份证  
            </summary>  
            <param name="idNumber"></param>  
            <returns></returns>  
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.CheckIDCard18(System.String)">
            <summary>  
            18位身份证号码验证  
            </summary>  
        </member>
        <member name="M:BntWeb.Utility.Extensions.StringExtensions.CheckIDCard15(System.String)">
            <summary>  
            16位身份证号码验证  
            </summary>  
        </member>
        <member name="T:BntWeb.Utility.PinYinConverter">
            <summary>
            汉字拼音转换类
            </summary>
        </member>
        <member name="F:BntWeb.Utility.PinYinConverter.otherChinese">
            <summary>
            二级汉字数组
            </summary>
        </member>
        <member name="F:BntWeb.Utility.PinYinConverter.otherPinYin">
            <summary>
            二级汉字对应拼音数组
            </summary>
        </member>
        <member name="M:BntWeb.Utility.PinYinConverter.GetFirst(System.Char)">
            <summary>
            取拼音第一个字段
            </summary>        
            <param name="ch"></param>        
            <returns></returns>        
        </member>
        <member name="M:BntWeb.Utility.PinYinConverter.GetFirst(System.String)">
            <summary>
            取拼音第一个字段
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.PinYinConverter.Get(System.Char)">
            <summary>
            获取单字拼音
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.PinYinConverter.Get(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:BntWeb.Utility.RSACryption">
            <summary> 
            RSA加密解密及RSA签名和验证
            </summary> 
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSAKey(System.String@,System.String@)">
            <summary>
            RSA 的密钥产生 产生私钥 和公钥 
            </summary>
            <param name="xmlPrivateKey"></param>
            <param name="xmlPublicKey"></param>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA的加密函数
            </summary>
            <param name="xmlPublicKey"></param>
            <param name="strEncryptString"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSAEncrypt(System.String,System.Byte[])">
            <summary>
            RSA的加密函数
            </summary>
            <param name="xmlPublicKey"></param>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSAEncryptStage(System.String,System.String)">
            <summary>
            RSA的分段加密函数
            </summary>
            <param name="xmlPublicKey"></param>
            <param name="strEncryptString"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSAEncryptStage(System.String,System.Byte[])">
            <summary>
            RSA的加密函数
            </summary>
            <param name="xmlPublicKey"></param>
            <param name="encryptString"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSADecrypt(System.String,System.String)">
            <summary>
            RSA的解密函数
            </summary>
            <param name="xmlPrivateKey"></param>
            <param name="strDecryptString"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSADecrypt(System.String,System.Byte[])">
            <summary>
            RSA的解密函数
            </summary>
            <param name="xmlPrivateKey"></param>
            <param name="decryptString"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSADecryptStage(System.String,System.String)">
            <summary>
            RSA的分段解密函数
            </summary>
            <param name="xmlPrivateKey"></param>
            <param name="strDecryptString"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.RSADecryptStage(System.String,System.Byte[])">
            <summary>
            RSA的分段解密函数
            </summary>
            <param name="xmlPrivateKey"></param>
            <param name="decryptString"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.GetHash(System.String,System.Byte[]@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="strSource"></param>
            <param name="hashData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.GetHash(System.String,System.String@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="strSource"></param>
            <param name="strHashData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.GetHash(System.IO.FileStream,System.Byte[]@)">
            <summary>
            获取Hash描述表
            </summary>
            <param name="objFile"></param>
            <param name="hashData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.SignatureFormatter(System.String,System.Byte[],System.Byte[]@)">
            <summary>
            RSA签名
            </summary>
            <param name="strKeyPrivate"></param>
            <param name="hashbyteSignature"></param>
            <param name="encryptedSignatureData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.SignatureFormatter(System.String,System.Byte[],System.String@)">
            <summary>
            RSA签名
            </summary>
            <param name="strKeyPrivate"></param>
            <param name="hashbyteSignature"></param>
            <param name="strEncryptedSignatureData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.SignatureFormatter(System.String,System.String,System.Byte[]@)">
            <summary>
            RSA签名
            </summary>
            <param name="strKeyPrivate"></param>
            <param name="strHashbyteSignature"></param>
            <param name="encryptedSignatureData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.SignatureFormatter(System.String,System.String,System.String@)">
            <summary>
            RSA签名
            </summary>
            <param name="strKeyPrivate"></param>
            <param name="strHashbyteSignature"></param>
            <param name="strEncryptedSignatureData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.SignatureDeformatter(System.String,System.Byte[],System.Byte[])">
            <summary>
            签名验证
            </summary>
            <param name="strKeyPublic"></param>
            <param name="hashbyteDeformatter"></param>
            <param name="deformatterData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.SignatureDeformatter(System.String,System.String,System.Byte[])">
            <summary>
            签名验证
            </summary>
            <param name="strKeyPublic"></param>
            <param name="strHashbyteDeformatter"></param>
            <param name="deformatterData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.SignatureDeformatter(System.String,System.Byte[],System.String)">
            <summary>
            签名验证
            </summary>
            <param name="strKeyPublic"></param>
            <param name="hashbyteDeformatter"></param>
            <param name="strDeformatterData"></param>
            <returns></returns>
        </member>
        <member name="M:BntWeb.Utility.RSACryption.SignatureDeformatter(System.String,System.String,System.String)">
            <summary>
            签名验证
            </summary>
            <param name="strKeyPublic"></param>
            <param name="strHashbyteDeformatter"></param>
            <param name="strDeformatterData"></param>
            <returns></returns>
        </member>
        <member name="T:BntWeb.Validation.ModelValidation.ValidateAttribute">
            <summary>
            Model对象数据有效性验证
            </summary>
        </member>
        <member name="T:BntWeb.Validation.ModelValidation.ApiValidateAttribute">
            <summary>
            Model对象数据有效性验证
            </summary>
        </member>
        <member name="M:BntWeb.Validation.PathValidation.ValidatePath(System.String,System.String)">
            <summary>
            判断参数路径是否是基础路径范围内
            如果不是就抛出异常
            </summary>
            <param name="basePath">基础目录路径</param>
            <param name="mappedPath">被验证的路径</param>
            <rereturns>有效路径的地址</rereturns>
            <exception cref="T:System.ArgumentException">如果路径无效</exception>
        </member>
        <member name="M:BntWeb.WebApi.DefaultBntWebApiHttpControllerSelector.TryResolve``1(System.Object,``0@)">
            <summary>
            Tries to resolve an instance for the controller associated with a given service key for the work context scope.
            </summary>
            <typeparam name="T">The type of the controller.</typeparam>
            <param name="serviceKey">The service key for the controller.</param>
            <param name="instance">The controller instance.</param>
            <returns>True if the controller was resolved; false otherwise.</returns>
        </member>
        <member name="M:BntWeb.WebApi.DefaultBntWebApiHttpControllerActivator.TryResolve``1(System.Object,``0@)">
            <summary>
            Tries to resolve an instance for the controller associated with a given service key for the work context scope.
            </summary>
            <typeparam name="T">The type of the controller.</typeparam>
            <param name="workContext">The work context.</param>
            <param name="serviceKey">The service key for the controller.</param>
            <param name="instance">The controller instance.</param>
            <returns>True if the controller was resolved; false otherwise.</returns>
        </member>
        <member name="P:BntWeb.WebApi.Filters.BasicAuthenticationAttribute.Forcible">
            <summary>
            是否强制认证，true认证失败则报错，false认证失败继续执行并没有登陆用户信息
            </summary>
        </member>
        <member name="P:BntWeb.WebApi.Models.BaseApiController.AuthorizedUser">
            <summary>
            当前授权用户
            </summary>
        </member>
        <member name="P:BntWeb.WebApi.Models.BaseApiController.Platform">
            <summary>
            请求来源平台
            </summary>
        </member>
        <member name="T:BntWeb.WebApi.Models.Platform">
            <summary>
            请求来源平台
            </summary>
        </member>
        <member name="F:BntWeb.WebApi.Models.Platform.IOS">
            <summary>
            
            </summary>
        </member>
        <member name="F:BntWeb.WebApi.Models.Platform.Android">
            <summary>
            
            </summary>
        </member>
        <member name="F:BntWeb.WebApi.Models.Platform.Web">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
